#+TITLE: STU Trees II
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup

[[elisp:(find-file-other-window%20"generic-instructions.org")][Read Instructions]]
[[elisp:(progn%20(save-buffer)%20(browse-url-of-file%20(org-html-export-to-html)))][Export to HTML and Browse]]
[[elisp:(progn%20(save-buffer)%20(org-clock-report%201)%20(save-buffer))][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2019-03-14 Thu 15:22]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *2:00* |
#+END:

* Exercises
  Exercise, to be precise:
** DONE LND
   CLOSED: [2019-03-14 Thu 15:22]
#+begin_note
  Why do 17 characters require 5 bits per character for a fixed-length encoding?
  What in general is required for /n/ different characters?
#+end_note
#+begin_info
  Because it focuses on the character that requires the most amount of bits, and applies
  that number to the rest of the characters.  Because 1111 is only 15, 1 0001 is 17, so 
  all five bits are required without compression.
#+end_info
* Problems
  No optional problems this week.
** DONE LTI
   CLOSED: [2019-03-14 Thu 15:54]
#+begin_note
  Use the tree and the code given below to decode the message
  =00010010000111010111011011010111100110000010111101100011101011110=.

  Best would be to write a =decode= function that has the same signature as
  =find-leaf= and calls =find-leaf= as a helper function.

  Now decode the longer message
  =0001001000111001110101110110110101111001100000101111011000111010111100111=
  and explain the reason for the perhaps surprising result.

#+end_note
#+begin_info
The decoder function uses recursion.  It assigns the variable "leaf-cell" to the 
first part of the sequnce, and displays it.  It then recurses calling the reaining 
list using cdr on the same tree.  Once it finishes, aka hits "", it ends.
#+end_info
#+BEGIN_SRC elisp :results raw
  (require 'cl)

  (defvar tree
    '((("n" "t") (("i" "o") (" " ""))) ("e" ("h" "r"))))

  (defun get-value (node)
    (and (stringp node) node))

  (defun get-left (node)
    (and (listp node) (first node)))

  (defun get-right (node)
    (and (listp node) (second node)))

  (defun find-leaf (encoded tree)
    (if (get-value tree)
        (cons tree encoded)
      (let ((first-char (elt encoded 0))
            (rest-of-encoded (substring encoded 1)))
        (case first-char
          (?0 (find-leaf rest-of-encoded (get-left tree)))
          (?1 (find-leaf rest-of-encoded (get-right tree)))
          (t "")))))
  (defun decoder (encoded tree)
  (if (equal encoded "")
    ""
    (let ((leaf-cell (find-leaf encoded tree)))
  (cons (car leaf-cell) (decoder (cdr leaf-cell) tree)))))
  (decoder "00010010000111010111011011010111100110000010111101100011101011110" tree)
  ;(find-leaf "000" tree)
#+END_SRC

#+RESULTS:
(n e i t h e r   h e r e   n o r   t h e r e . )

** YDQ
#+begin_note
  What is the tie-breaking rule used when deciding where to insert into the
  queue in this Huffman tree construction? Implement this rule in elisp code,
  and compare it to the one used by [[http://huffman.ooz.ie][this tool]]. Does it matter what tie-breaking
  rule you use? Why or why not?
#+end_note
#+begin_info
  It sorts first by the weight of the tree, then by alphabet.  If multiple letters
  have the same weight, the tie breaker puts them in order by alphabet.  It does matter what
  tie breaking rule you use, becuase it can change the number of bits associated with each
  character.
#+end_info
** DONE YTR
   CLOSED: [2019-03-14 Thu 16:28]
#+begin_note
  Construct the Huffman tree for and build the bitstring encoding the string
  "cookbooknook".

  What is the average number of bits per character with this encoding?

  What is the compression ratio achieved using this tree\rsquo{}s encoding of
  the string?
#+end_note
#+begin_info
  B 1    B 1
  C 1    C 1
  K 3 -> N 1
  N 1    K 3
  O 6    O 6 

   12
 0/  \1
O 6   6
    0/ \1
   K 3  3
      0/ \1
     N 1  2
        1/ \0
       C 1 B 1
O: 0
K: 10
N: 110
C: 1111
B: 1110

Average: 2.8
Ratio: 70%
#+end_info
#+BEGIN_SRC elisp :results code
(let ((O "0")
      (K "10")
      (N "110")
      (C "1111")
      (B "1110"))
  (list C O O K B O O K N O O K))
#+END_SRC

#+RESULTS:
#+begin_src elisp
("1111" "0" "0" "10" "1110" "0" "0" "10" "110" "0" "0" "10")
#+end_src

** DONE LGO
   CLOSED: [2019-03-14 Thu 16:45]
#+begin_note
  Using the "cookbooknook" encoding, the bitstring =1011001110= decodes into one
  English word. What word is it?
#+end_note
#+begin_info
  K - N - O - B
  10-110-0-1110
#+end_info
** DONE YIV
   CLOSED: [2019-03-14 Thu 17:02]
#+begin_note
  Context from STK (with one minor change in the code):

  We now revisit the problem of representing trees in elisp. The following code
  shows a possible implementation of a tree node as a symbol, which exploits the
  versatile structure of a symbol. The symbol’s value is the node’s value —
  which can be any lisp object. The symbol’s plist (property list) is used for
  storing the “pointers” to (the symbols of) the left and right children, /and/
  the parent of that symbol-node. Note that this is specific to binary trees,
  but the technique can be extended to arbitrary trees.

#+BEGIN_SRC elisp :results silent
  (require 'cl)

  (defun get-value (node)
    (and (symbolp node) (symbol-value node)))

  (defun set-value (node new-value)
    (and (symbolp node) (set node new-value)))

  (defun get-parent (node)
    (and (symbolp node) (get node :parent)))

  (defun set-parent (node parent)
    (and (symbolp node) (symbolp parent) (put node :parent parent)))

  (defun get-left (node)
    (and (symbolp node) (get node :left)))

  (defun set-left (node left)
    (and (symbolp node) (symbolp left) (put node :left left)))

  (defun get-right (node)
    (and (symbolp node) (get node :right)))

  (defun set-right (node right)
    (and (symbolp node) (symbolp right) (put node :right right)))

  (defun try-it-out ()
    (setq a 1 b 2 c 3)
    (put 'a :right 'b)
    (put 'a :left 'c)
    (put 'c :parent 'a)
    (put 'b :parent 'a)
    (list a (symbol-plist 'a)))

  (setq node-counter 0)

  (defun make-node ()
    (let ((symbol (intern (concat "n" (number-to-string node-counter)))))
      (set symbol node-counter)
      (incf node-counter)
      (setf (symbol-plist symbol) nil)
      symbol))

  (defun build-tree (height)
    (let ((root (make-node)))
      (if (> height 0)
          (let ((left (build-tree (1- height)))
                (right (build-tree (1- height))))
            (set-left root left)
            (set-right root right)
            (set-parent left root)
            (set-parent right root)))
      root))
#+END_SRC

   Draw the trees created by calling the =try-it-out= and the =build-tree=
   functions, the latter called with at least three different height arguments.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
#+BEGIN_SRC elisp
  (build-tree 9)
#+END_SRC

#+RESULTS:
: n2115
#+BEGIN_SRC elisp
  (try-it-out)
#+END_SRC

#+RESULTS:
| 1 | (:right b :left c) |

* Puzzles
  No puzzles this week. Work on GPAOs instead!
  

